{"version":3,"sources":["webpack:///./node_modules/_core-js@3.6.5@core-js/internals/array-reduce.js","webpack:///./node_modules/_core-js@3.6.5@core-js/internals/inherit-if-required.js"],"names":["aFunction","toObject","IndexedObject","toLength","createMethod","IS_RIGHT","that","callbackfn","argumentsLength","memo","O","self","length","index","i","TypeError","module","exports","left","right","isObject","setPrototypeOf","$this","dummy","Wrapper","NewTarget","NewTargetPrototype","constructor","prototype"],"mappings":"qGAAA,IAAIA,EAAY,EAAQ,QACpBC,EAAW,EAAQ,QACnBC,EAAgB,EAAQ,QACxBC,EAAW,EAAQ,QAGnBC,EAAe,SAAUC,GAC3B,OAAO,SAAUC,EAAMC,EAAYC,EAAiBC,GAClDT,EAAUO,GACV,IAAIG,EAAIT,EAASK,GACbK,EAAOT,EAAcQ,GACrBE,EAAST,EAASO,EAAEE,QACpBC,EAAQR,EAAWO,EAAS,EAAI,EAChCE,EAAIT,GAAY,EAAI,EACxB,GAAIG,EAAkB,EAAG,MAAO,EAAM,CACpC,GAAIK,KAASF,EAAM,CACjBF,EAAOE,EAAKE,GACZA,GAASC,EACT,MAGF,GADAD,GAASC,EACLT,EAAWQ,EAAQ,EAAID,GAAUC,EACnC,MAAME,UAAU,+CAGpB,KAAMV,EAAWQ,GAAS,EAAID,EAASC,EAAOA,GAASC,EAAOD,KAASF,IACrEF,EAAOF,EAAWE,EAAME,EAAKE,GAAQA,EAAOH,IAE9C,OAAOD,IAIXO,EAAOC,QAAU,CAGfC,KAAMd,GAAa,GAGnBe,MAAOf,GAAa,K,qBCtCtB,IAAIgB,EAAW,EAAQ,QACnBC,EAAiB,EAAQ,QAG7BL,EAAOC,QAAU,SAAUK,EAAOC,EAAOC,GACvC,IAAIC,EAAWC,EAUf,OAPEL,GAE0C,mBAAlCI,EAAYF,EAAMI,cAC1BF,IAAcD,GACdJ,EAASM,EAAqBD,EAAUG,YACxCF,IAAuBF,EAAQI,WAC/BP,EAAeC,EAAOI,GACjBJ","file":"js/chunk-18585128.52367dc9.js","sourcesContent":["var aFunction = require('../internals/a-function');\nvar toObject = require('../internals/to-object');\nvar IndexedObject = require('../internals/indexed-object');\nvar toLength = require('../internals/to-length');\n\n// `Array.prototype.{ reduce, reduceRight }` methods implementation\nvar createMethod = function (IS_RIGHT) {\n  return function (that, callbackfn, argumentsLength, memo) {\n    aFunction(callbackfn);\n    var O = toObject(that);\n    var self = IndexedObject(O);\n    var length = toLength(O.length);\n    var index = IS_RIGHT ? length - 1 : 0;\n    var i = IS_RIGHT ? -1 : 1;\n    if (argumentsLength < 2) while (true) {\n      if (index in self) {\n        memo = self[index];\n        index += i;\n        break;\n      }\n      index += i;\n      if (IS_RIGHT ? index < 0 : length <= index) {\n        throw TypeError('Reduce of empty array with no initial value');\n      }\n    }\n    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {\n      memo = callbackfn(memo, self[index], index, O);\n    }\n    return memo;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.reduce` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce\n  left: createMethod(false),\n  // `Array.prototype.reduceRight` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright\n  right: createMethod(true)\n};\n","var isObject = require('../internals/is-object');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\n\n// makes subclassing work correct for wrapped built-ins\nmodule.exports = function ($this, dummy, Wrapper) {\n  var NewTarget, NewTargetPrototype;\n  if (\n    // it can work only with native `setPrototypeOf`\n    setPrototypeOf &&\n    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this\n    typeof (NewTarget = dummy.constructor) == 'function' &&\n    NewTarget !== Wrapper &&\n    isObject(NewTargetPrototype = NewTarget.prototype) &&\n    NewTargetPrototype !== Wrapper.prototype\n  ) setPrototypeOf($this, NewTargetPrototype);\n  return $this;\n};\n"],"sourceRoot":""}